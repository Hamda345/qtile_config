#+title: Qtile Configuration
#+startup: showeverything
#+options: toc:t num:nil
#+AUTHOR: Hamda Dallel

* Screenshot:
[[file:screenshot.png]]

* Imports:
Thes are python modules that must be imported to the config file:
#+begin_src python:
import os
import psutil
import subprocess
from libqtile import backend, bar, layout, widget, hook, extension
from libqtile.config import Click, Drag, Group, Key, Match, Screen
from libqtile.lazy import lazy
#+end_src
* Mod Key variable (super key):

#+begin_src python:
mod = "mod4"
#+end_src
* Keybindings:
| Keybinding              | Description                       |
|-------------------------+-----------------------------------|
| MODKEY + RETURN         | Spawn Terminal (wezterm)          |
| MODKEY + R              | Open Launcher (Rofi)              |
| MODKEY + X              | Open Power Menu (Rofi)            |
| MODKEY + N              | Open Network Menu                 |
| MODKEY + Q              | Close A Window                    |
| MODKEY + [1..8]         | Jump To Workspace N¬∞              |
| MODKEY + SHIFT + [1..8] | Move Window To Workspace N¬∞       |
| MODKEY + H              | Move Focus To Left                |
| MODKEY + L              | Move Focus To Right               |
| MODKEY + J              | Move Focus Down                   |
| MODKEY + K              | Move Focus Up                     |
| MODKEY + TAB            | Move Window Focus To other Window |
| MODKEY + SPACE          | Toggle Between Layouts            |
| MODKEY + CTRL + H       | Grow Window To The Left           |
| MODKEY + CTRL + L       | Grow Window To The Right          |
| MODKEY + CTRL + J       | Grow Window Down                  |
| MODKEY + CTRL + K       | Grow Window Up                    |
| MODKEY + M              | Reset All Windows Sizes           |
| MODKEY + S              | Lock Screen (i3lock)              |
| MODKEY + D              | Launch Emacs                      |
| MODKEY + CTRL + Q       | Exit Qtile                        |
| MODKEY + CTRL + R       | Reload Qtile                      |
#+begin_src python

keys = [
    # A list of available commands that can be bound to keys can be found
    # at https://docs.qtile.org/en/latest/manual/config/lazy.html
    # Switch between windows
    Key([mod], "h", lazy.layout.left(), desc="Move focus to left"),
    Key([mod], "l", lazy.layout.right(), desc="Move focus to right"),
    Key([mod], "j", lazy.layout.down(), desc="Move focus down"),
    Key([mod], "k", lazy.layout.up(), desc="Move focus up"),
    Key([mod], "space", lazy.next_layout(), desc="Toggle Between Layouts"),
    # Key([mod], "space", lazy.layout.next(), desc="Move window focus to other window"),
    # Move windows between left/right columns or move up/down in current stack.
    # Moving out of range in Columns layout will create new column.
    Key([mod, "shift"], "h", lazy.layout.shuffle_left(), desc="Move window to the left"),
    Key([mod, "shift"], "l", lazy.layout.shuffle_right(), desc="Move window to the right"),
    Key([mod, "shift"], "j", lazy.layout.shuffle_down(), desc="Move window down"),
    Key([mod, "shift"], "k", lazy.layout.shuffle_up(), desc="Move window up"),
    # Grow windows. If current window is on the edge of screen and direction
    # will be to screen edge - window would shrink.
    Key([mod, "control"], "h", lazy.layout.grow_left(), desc="Grow window to the left"),
    Key([mod, "control"], "l", lazy.layout.grow_right(), desc="Grow window to the right"),
    Key([mod, "control"], "j", lazy.layout.grow_down(), desc="Grow window down"),
    Key([mod, "control"], "k", lazy.layout.grow_up(), desc="Grow window up"),
    Key([mod], "m", lazy.layout.normalize(), desc="Reset all window sizes"),
    # Toggle between split and unsplit sides of stack.
    # Split = all windows displayed
    # Unsplit = 1 window displayed, like Max layout, but still with
    # multiple stack panes
    Key(
        [mod, "shift"],
        "Return",
        lazy.layout.toggle_split(),
        desc="Toggle between split and unsplit sides of stack",
    ),

    Key([mod], "s", lazy.spawn("i3lock -i /home/hamda/Pictures/Wallpapers/dotfiles1/wallhaven-ox18l9.png"), desc="Lock Screen"),
    Key([mod], "d", lazy.spawn("/home/hamda/.config/emacs/bin/doom run"), desc="Run Emacs"),

    Key([mod], "Return", lazy.spawn("/usr/bin/flatpak run --branch=stable --arch=x86_64 --command=wezterm org.wezfurlong.wezterm start --cwd ."), desc="Launch terminal"),
  #  Key([mod], "Return", lazy.spawn("kitty")),
    Key([mod], "n", lazy.spawn("rofi-wifi-menu"), desc="show available wifi networks"),
    # Toggle between different layouts as defined below
    Key([mod], "Tab", lazy.layout.next(), desc="Move Focus To other Window"),
    # Key([mod], "Tab", lazy.next_layout(), desc="Toggle between layouts"),
    Key([mod], "q", lazy.window.kill(), desc="Kill focused window"),
    Key([mod, "control"], "r", lazy.reload_config(), desc="Reload the config"),
    Key([mod, "control"], "q", lazy.shutdown(), desc="Shutdown Qtile"),
    Key([mod], "r", lazy.spawn("rofi -show drun -show-icons -theme photon-violet"), desc="Run app launcher"),
    Key([mod], "x", lazy.spawn("rofi -show p -modi p:rofi-power-menu -theme photon-violet"), desc="Run power menu"),
    Key([], "XF86AudioLowerVolume", lazy.spawn("pactl set-sink-volume @DEFAULT_SINK@ -5%"), desc="Increase Audio Volume"),
    Key([], "XF86AudioRaiseVolume", lazy.spawn("pactl set-sink-volume @DEFAULT_SINK@ +5%"), desc="Descrease Audio Volume"),
    Key([], "XF86AudioMute", lazy.spawn("pactl set-sink-mute @DEFAULT_SINK@ toggle"), desc="Mute Audio Volume"),
     Key(['mod4'], 'p', lazy.run_extension(extension.DmenuRun(
        dmenu_prompt=">",
        dmenu_font="JetBrains Mono",
        background="#000000",
        foreground="#01161b",
        selected_background="#eeeeee",
        selected_foreground="#66ffff",
        dmenu_height=24,  # Only supported by some dmenu forks
    ))),
]
#+end_src
* Workspaces:
- Workspaces are named as groups in qtile
- group_names list represents number keys for AZERTY keyboard layouts, you can repplace them with numbers from 1 to 8 if you have different keyboard layout such as QWERTY
- Group names (workspaces) will be labeled with icons instead of numbers using group_labels list
#+begin_src python
group_names = ["ampersand", "eacute", "quotedbl", "apostrophe", "parenleft", "section", "egrave", "exclam"]

group_labels = ["Óûï", "ÔÇ¨", "Ôùä", "ÔÑ°","ÔÄΩ", "ÔÑâ", "ÔãÜ", "ÔÜ∞"]

groups = []
for i in range(len(group_names)):

    groups.append(
        Group(
            name=group_names[i],
            label=group_labels[i],
        ))

for i in groups:
    keys.extend(
        [
            # mod1 + letter of group = switch to group
            Key(
                [mod],
                i.name,
                lazy.group[i.name].toscreen(),
                desc="Switch to group {}".format(i.name),
            ),
            # mod1 + shift + letter of group = switch to & move focused window to group
            Key(
                [mod, "shift"],
                i.name,
                lazy.window.togroup(i.name, switch_group=True),
                desc="Switch to & move focused window to group {}".format(i.name),
            ),
            # Or, use below if you prefer not to switch to that group.
            # # mod1 + shift + letter of group = move focused window to group
            # Key([mod, "shift"], i.name, lazy.window.togroup(i.name),
            #     desc="move focused window to group {}".format(i.name)),
        ]
    )

#+end_src

* Layouts Settings:
Setting up layouts themes:
#+begin_src python
def init_layout_theme():
    return {"margin":5,
            "border_width":2,
            "border_focus": "#5e81ac",
            "border_normal": "#4c566a"
            }
layout_theme = init_layout_theme()

layouts = [
    layout.Columns(**layout_theme),
    layout.Max(**layout_theme),
    # Try more layouts by unleashing below layouts.
    layout.Stack(**layout_theme),
    layout.Bsp(**layout_theme),
    layout.Matrix(**layout_theme),
    layout.MonadTall(**layout_theme),
    layout.MonadWide( **layout_theme),
    layout.RatioTile( **layout_theme),
    layout.Tile( **layout_theme),
    layout.TreeTab( **layout_theme),
    layout.VerticalTile( **layout_theme),
    layout.Zoomy( **layout_theme),
]
#+end_src

* Bar and Widgets:
Setting up Top bar and widgets inside the BAR
#+begin_src python
widget_defaults = dict(
    font="JetBrains Mono",
    fontsize=15,
    padding=4,
)
extension_defaults = widget_defaults.copy()

screens = [
    Screen(
        top=bar.Bar(
            [
                widget.Image(filename="~/.config/qtile/python.png"),
                widget.GroupBox(),
                widget.Prompt(),
                widget.WindowName(),
                widget.Chord(
                    chords_colors={
                        "launch": ("#000000", "#eeeeee"),
                    },
                    name_transform=lambda name: name.upper(),
                ),
                # NB Systray is incompatible with Wayland, consider using StatusNotifier instead
                # widget.StatusNotifier(),
                widget.TextBox(" "),
                widget.Wallpaper(directory="~/Pictures/Wallpapers/dotfiles1/", label="üñºÔ∏è"),
                widget.TextBox(" "),
                widget.Image(filename="~/.config/qtile/ram.png"),
                widget.Memory(measure_mem="G"),
 #               widget.TextBox("üîã"),
                widget.TextBox(" "),
                widget.Image(filename="~/.config/qtile/battery.png"),
                widget.Battery(format="{percent:2.0%}"),
                widget.TextBox(" "),
 #               widget.TextBox("üîä"),
                widget.Image(filename="~/.config/qtile/sound.png"),
                widget.Volume(),
                # widget.Bluetooth(),
                # widget.Backlight(brightness_file="/sys/class/backlight/amdgpu_bl0/max_brightness"),
                widget.TextBox(" "),
                widget.TextBox("üå°"),
                widget.ThermalZone(),
               # widget.NvidiaSensors(),
                #widget.TextBox(" "),
                #widget.TextBox("ÔÇû "),
                #widget.Net(interface="wlo1"),
                widget.TextBox(" "),
                widget.TextBox("ÔÅ≥ "),
                widget.Clock(format="%Y-%m-%d %H:%M", background="#553B88"),
                widget.TextBox(" "),
                widget.Notify(),
                widget.TextBox("ÔÄô "),
                widget.CheckUpdates(distro='Fedora'),
                widget.Systray(),
                widget.CurrentLayoutIcon(),
                ],
            35,
             # border_width=[1, 1, 1, 1],  # Draw top and bottom borders
             # border_color=["ff00ff", "000000", "ff00ff", "000000"]  # Borders are magenta
             background="#07001d",
             opacity=0.7,
             border_width=[1, 1, 6, 1]
        ),
    ),
]
#+end_src
* Autostart:
Including Autostart script to the config for to autostart other programs
#+begin_src python
@hook.subscribe.startup_once
def autostart():
    home = os.path.expanduser('~/.config/qtile/autostart.sh')
    subprocess.Popen([home])
#+end_src
